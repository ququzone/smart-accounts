/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type {
  WebauthnValidator,
  WebauthnValidatorInterface,
} from '../../../../contracts/validators/p256/WebauthnValidator'

const _abi = [
  {
    inputs: [
      {
        internalType: 'contract ISecp256r1',
        name: '_impl',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'oldPk',
        type: 'bytes',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'newPk',
        type: 'bytes',
      },
    ],
    name: 'PkChanged',
    type: 'event',
  },
  {
    inputs: [],
    name: 'NAME',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'VERSION',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'enable',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'impl',
    outputs: [
      {
        internalType: 'contract ISecp256r1',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'pks',
    outputs: [
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: '',
        type: 'bytes',
      },
    ],
    name: 'validCaller',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'sender',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'nonce',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'initCode',
            type: 'bytes',
          },
          {
            internalType: 'bytes',
            name: 'callData',
            type: 'bytes',
          },
          {
            internalType: 'uint256',
            name: 'callGasLimit',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'verificationGasLimit',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'preVerificationGas',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maxFeePerGas',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maxPriorityFeePerGas',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'paymasterAndData',
            type: 'bytes',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
        ],
        internalType: 'struct UserOperation',
        name: 'userOp',
        type: 'tuple',
      },
      {
        internalType: 'bytes32',
        name: 'userOpHash',
        type: 'bytes32',
      },
      {
        internalType: 'bytes',
        name: 'signature',
        type: 'bytes',
      },
    ],
    name: 'validateSignature',
    outputs: [
      {
        internalType: 'uint256',
        name: 'validationData',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
] as const

const _bytecode =
  '0x60a03461007157601f610bea38819003918201601f19168301916001600160401b038311848410176100765780849260209460405283398101031261007157516001600160a01b038116810361007157608052604051610b5d908161008d823960805181818161022b01526108e10152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a71461048e575081630c959556146102b25781634dffc3231461024f5781638abf60771461020b5781639356375c146101c05781639ea9bd591461013c57508063a3f4df7e146100e05763ffa1ad741461007d57600080fd5b346100dc57816003193601126100dc5780516100d89161009c82610547565b600582527f302e302e31000000000000000000000000000000000000000000000000000000602083015251918291602083526020830190610664565b0390f35b5080fd5b50346100dc57816003193601126100dc5780516100d89161010082610547565b601282527f576562617574686e2056616c696461746f720000000000000000000000000000602083015251918291602083526020830190610664565b905082346101bd57826003193601126101bd576101576104f7565b506024359067ffffffffffffffff82116101bd575060649261017e602092369085016104c4565b50505162461bcd60e51b815291820152600f60248201527f6e6f7420696d706c656d656e74656400000000000000000000000000000000006044820152fd5b80fd5b5050346100dc5760203660031901126100dc576101f8816100d8936001600160a01b036101eb6104f7565b168152806020522061059b565b9051918291602083526020830190610664565b5050346100dc57816003193601126100dc57602090516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b82846003196060368201126100dc5783359167ffffffffffffffff918284116100dc576101609084360301126101bd576044359182116101bd5750926102ab9161029e602095369084016104c4565b92909160243591016106ec565b9051908152f35b83836020928360031936011261048a5767ffffffffffffffff938135858111610486576102e290369084016104c4565b93903386528583526102f582872061059b565b933387528684528287209786116104735750610311875461050d565b601f8111610430575b508596601f86116001146103af578587987f49a125229beaa1b288f0f807170a37c7a131925683b0250b113db84181bfb0669798916103a4575b508760011b906000198960031b1c19161790555b8561037c8351958487958652850190610664565b91838303858501528183528483013780860183018790523395601f01601f191601030190a280f35b905082013589610354565b808752838720601f19871698885b8a81106104195750877f49a125229beaa1b288f0f807170a37c7a131925683b0250b113db84181bfb06698999a106103ff575b5050600187811b019055610368565b83013560001960038a901b60f8161c1916905588806103f0565b9091866001819285880135815501930191016103bd565b878752838720601f870160051c810191858810610469575b601f0160051c01905b81811061045e575061031a565b878155600101610451565b9091508190610448565b634e487b7160e01b875260419052602486fd5b8480fd5b8280fd5b84913461048a57602036600319011261048a573563ffffffff60e01b811680910361048a576337f0facb60e21b14815260209150f35b9181601f840112156104f25782359167ffffffffffffffff83116104f257602083818601950101116104f257565b600080fd5b600435906001600160a01b03821682036104f257565b90600182811c9216801561053d575b602083101461052757565b634e487b7160e01b600052602260045260246000fd5b91607f169161051c565b6040810190811067ffffffffffffffff82111761056357604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761056357604052565b90604051918260008254926105af8461050d565b90818452600194858116908160001461061e57506001146105db575b50506105d992500383610579565b565b9093915060005260209081600020936000915b8183106106065750506105d9935082010138806105cb565b855488840185015294850194879450918301916105ee565b9150506105d994506020925060ff191682840152151560051b82010138806105cb565b60005b8381106106545750506000910152565b8181015183820152602001610644565b9060209161067d81518092818552858086019101610641565b601f01601f1916010190565b67ffffffffffffffff811161056357601f01601f191660200190565b81601f820112156104f2578035906106bc82610689565b926106ca6040519485610579565b828452602083830101116104f257816000926020809301838601378301015290565b92820191906080828403126104f25767ffffffffffffffff9382358581116104f2578461071a9185016106a5565b91602095868501358181116104f257866107359187016106a5565b91604095868101358381116104f257886107509183016106a5565b9760608201359384116104f25761078b6107728b959286936107d795016106a5565b938951908382015282815261078681610547565b6109da565b8851938491836107a48185019d8e815193849201610641565b83016107b882518093878085019101610641565b016107cb82518093868085019101610641565b01038084520182610579565b6107e8865197889251928391610641565b8660009788928101039060025afa156109cd57846108438792825161083388805180938861081f8184019788815193849201610641565b820190898201520387810184520182610579565b8751928392839251928391610641565b8101039060025afa156109c157835190356001600160a01b03908181168091036109bd57918692918392875286835285872061089d8751968794630ae7e17f60e41b86526004860152606060248601526064850190610664565b9060031984830301604485015288918154916108b88361050d565b928383528660019d8e8316928360001461099d57505050600114610961575b50505082809103917f0000000000000000000000000000000000000000000000000000000000000000165afa92831561095857508392610921575b505061091c575090565b905090565b90809250813d8311610951575b6109388183610579565b810103126100dc575180151581036100dc573880610912565b503d61092e565b513d85823e3d90fd5b909192508952848920918a8a935b828510610984575050500183018280386108d7565b805484860189015288978a9750909401938c910161096f565b9196509392508594915060ff191683830152151560051b010191386108d7565b8580fd5b505051903d90823e3d90fd5b50505051903d90823e3d90fd5b805115610b2b57604051906060820182811067ffffffffffffffff82111761056357604052604082527f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656660208301527f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392d5f6040830152805160039080821b9080820460081490151715610b155760068091049381845106610b02575b610a97610a8186610689565b95610a8f6040519788610579565b808752610689565b6020860190601f190136823784805101945b858110610ab95750505050505090565b8460049101918251600190603f9082828260121c16880101518453828282600c1c1688010151838501538282828a1c168801015160028501531685010151868201530190610aa9565b936000198114610b155760010193610a75565b634e487b7160e01b600052601160045260246000fd5b506040516020810181811067ffffffffffffffff82111761056357604052600081529056fea164736f6c6343000813000a'

type WebauthnValidatorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (xs: WebauthnValidatorConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1

export class WebauthnValidator__factory extends ContractFactory {
  constructor(...args: WebauthnValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(_impl: string, overrides?: Overrides & { from?: string }): Promise<WebauthnValidator> {
    return super.deploy(_impl, overrides || {}) as Promise<WebauthnValidator>
  }
  override getDeployTransaction(_impl: string, overrides?: Overrides & { from?: string }): TransactionRequest {
    return super.getDeployTransaction(_impl, overrides || {})
  }
  override attach(address: string): WebauthnValidator {
    return super.attach(address) as WebauthnValidator
  }
  override connect(signer: Signer): WebauthnValidator__factory {
    return super.connect(signer) as WebauthnValidator__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): WebauthnValidatorInterface {
    return new utils.Interface(_abi) as WebauthnValidatorInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): WebauthnValidator {
    return new Contract(address, _abi, signerOrProvider) as WebauthnValidator
  }
}
