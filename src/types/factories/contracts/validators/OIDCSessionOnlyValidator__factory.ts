/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import type { Provider, TransactionRequest } from '@ethersproject/providers'
import type {
  OIDCSessionOnlyValidator,
  OIDCSessionOnlyValidatorInterface,
} from '../../../contracts/validators/OIDCSessionOnlyValidator'

const _abi = [
  {
    inputs: [],
    name: 'NAME',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'VERSION',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'enable',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes4',
        name: 'interfaceId',
        type: 'bytes4',
      },
    ],
    name: 'supportsInterface',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'caller',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: 'data',
        type: 'bytes',
      },
    ],
    name: 'validCaller',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'sender',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'nonce',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'initCode',
            type: 'bytes',
          },
          {
            internalType: 'bytes',
            name: 'callData',
            type: 'bytes',
          },
          {
            internalType: 'uint256',
            name: 'callGasLimit',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'verificationGasLimit',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'preVerificationGas',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maxFeePerGas',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'maxPriorityFeePerGas',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'paymasterAndData',
            type: 'bytes',
          },
          {
            internalType: 'bytes',
            name: 'signature',
            type: 'bytes',
          },
        ],
        internalType: 'struct UserOperation',
        name: 'userOp',
        type: 'tuple',
      },
      {
        internalType: 'bytes32',
        name: 'userOpHash',
        type: 'bytes32',
      },
      {
        internalType: 'bytes',
        name: 'signature',
        type: 'bytes',
      },
    ],
    name: 'validateSignature',
    outputs: [
      {
        internalType: 'uint256',
        name: 'validationData',
        type: 'uint256',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
] as const

const _bytecode =
  '0x60808060405234610016576102e7908161001c8239f35b600080fdfe60806040908082526004918236101561001757600080fd5b600091823560e01c90816301ffc9a714610227575080630c959556146101f65780634dffc323146101ab5780639ea9bd591461014f578063a3f4df7e146100e85763ffa1ad741461006757600080fd5b346100e457816003193601126100e4578051918183019083821067ffffffffffffffff8311176100d157506100cd93508152600582527f302e302e3100000000000000000000000000000000000000000000000000000060208301525191829182610291565b0390f35b634e487b7160e01b815260418552602490fd5b5080fd5b50346100e457816003193601126100e4578051918183019083821067ffffffffffffffff8311176100d157506100cd93508152600e82527f4f4944432056616c696461746f7200000000000000000000000000000000000060208301525191829182610291565b50346100e457806003193601126100e457823573ffffffffffffffffffffffffffffffffffffffff8116036100e45760243567ffffffffffffffff81116101a75760209361019f9136910161025e565b505051908152f35b8280fd5b506003196060368201126101a75767ffffffffffffffff9084358281116101f2579061016091360301126101a7576044359081116101a75760209361019f9136910161025e565b8480fd5b828460203660031901126100e45780359067ffffffffffffffff82116101a7576102229136910161025e565b505080f35b839085346101a75760203660031901126101a7573563ffffffff60e01b81168091036101a7576337f0facb60e21b14815260209150f35b9181601f8401121561028c5782359167ffffffffffffffff831161028c576020838186019501011161028c57565b600080fd5b6020808252825181830181905290939260005b8281106102c657505060409293506000838284010152601f8019910116010190565b8181018601518482016040015285016102a456fea164736f6c6343000813000a'

type OIDCSessionOnlyValidatorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>

const isSuperArgs = (
  xs: OIDCSessionOnlyValidatorConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1

export class OIDCSessionOnlyValidator__factory extends ContractFactory {
  constructor(...args: OIDCSessionOnlyValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args)
    } else {
      super(_abi, _bytecode, args[0])
    }
  }

  override deploy(overrides?: Overrides & { from?: string }): Promise<OIDCSessionOnlyValidator> {
    return super.deploy(overrides || {}) as Promise<OIDCSessionOnlyValidator>
  }
  override getDeployTransaction(overrides?: Overrides & { from?: string }): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  override attach(address: string): OIDCSessionOnlyValidator {
    return super.attach(address) as OIDCSessionOnlyValidator
  }
  override connect(signer: Signer): OIDCSessionOnlyValidator__factory {
    return super.connect(signer) as OIDCSessionOnlyValidator__factory
  }

  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): OIDCSessionOnlyValidatorInterface {
    return new utils.Interface(_abi) as OIDCSessionOnlyValidatorInterface
  }
  static connect(address: string, signerOrProvider: Signer | Provider): OIDCSessionOnlyValidator {
    return new Contract(address, _abi, signerOrProvider) as OIDCSessionOnlyValidator
  }
}
